name: Build and Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.head_commit.id == github.sha
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Semver Bump Tag/Release
        uses: actions/github-script@v7
        id: semantic_release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.sha;

            const commit = await github.rest.repos.getCommit({
              owner,
              repo,
              ref: sha
            });
            const message = commit.data.commit.message;

            let latestTag = 'v1.0.0';
            try {
              const tags = await github.rest.repos.listTags({ owner, repo, per_page: 1 });
              if (tags.data.length > 0) latestTag = tags.data[0].name;
            } catch {}

            let [major, minor, patch] = latestTag.replace(/^v/, '').split('.').map(Number);

            if (message.startsWith('BREAKING CHANGE')) {
              major += 1; minor = 0; patch = 0;
            } else if (message.startsWith('feat')) {
              minor += 1; patch = 0;
            } else if (message.startsWith('chore')) {
              patch += 1;
            } else {
              core.info('No release triggered by this commit message.');
              return;
            }

            const newTag = `v${major}.${minor}.${patch}`;

            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/tags/${newTag}`,
              sha: sha
            });

            await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: newTag,
              name: newTag,
              body: message,
              draft: false,
              prerelease: false
            });

            core.info(`Created release ${newTag}`);

  deploy:
    needs: [build, release]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
